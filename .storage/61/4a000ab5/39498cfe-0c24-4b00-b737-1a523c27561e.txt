$ cd /workspace/shadcn-ui && pnpm run lint

> shadcnui@ lint /workspace/shadcn-ui
> eslint --quiet ./src


/workspace/shadcn-ui/src/components/transactions/transaction-details.tsx
  36:50  error  Unexpected any. Specify a different type  @typescript-eslint/no-explicit-any

/workspace/shadcn-ui/src/lib/storage.ts
  433:9  error  'fields' is never reassigned. Use 'const' instead  prefer-const

✖ 2 problems (2 errors, 0 warnings)
  1 error and 0 warnings potentially fixable with the `--fix` option.

 ELIFECYCLE  Command failed with exit code 1.
$ cd /workspace/shadcn-ui && ls src/components/dashboard

low-stock-alert.tsx
recent-transactions.tsx
stats-card.tsx
$ cd /workspace/shadcn-ui && pnpm run build


> shadcnui@ build /workspace/shadcn-ui
> vite build

vite v5.4.19 building for production...
transforming...
✓ 2072 modules transformed.
rendering chunks...
computing gzip size...
dist/index.html                   0.88 kB │ gzip:   0.42 kB
dist/assets/index-DIDshEP_.css   61.61 kB │ gzip:  10.86 kB
dist/assets/index-Cn6ftHAc.js   543.70 kB │ gzip: 161.11 kB

(!) Some chunks are larger than 500 kB after minification. Consider:
- Using dynamic import() to code-split the application
- Use build.rollupOptions.output.manualChunks to improve chunking: https://rollupjs.org/configuration-options/#output-manualchunks
- Adjust chunk size limit for this warning via build.chunkSizeWarningLimit.
✓ built in 5.98s
$ cd /workspace/shadcn-ui && grep -r "SelectItem" --include="*.tsx" --include="*.jsx" .

./src/components/products/product-form.tsx:import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
./src/components/products/product-form.tsx:                        <SelectItem key={category.id} value={category.id}>
./src/components/products/product-form.tsx:                        </SelectItem>
./src/components/products/product-table.tsx:import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
./src/components/products/product-table.tsx:              <SelectItem value="">All Categories</SelectItem>
./src/components/products/product-table.tsx:                <SelectItem key={category.id} value={category.id}>
./src/components/products/product-table.tsx:                </SelectItem>
./src/components/transactions/transaction-form.tsx:import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
./src/components/transactions/transaction-form.tsx:                                <SelectItem key={product.id} value={product.id}>
./src/components/transactions/transaction-form.tsx:                                </SelectItem>
./src/components/transactions/transaction-table.tsx:import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
./src/components/transactions/transaction-table.tsx:              <SelectItem value="">All Statuses</SelectItem>
./src/components/transactions/transaction-table.tsx:              <SelectItem value="pending">Pending Payment</SelectItem>
./src/components/transactions/transaction-table.tsx:              <SelectItem value="payment_confirmed">Payment Confirmed</SelectItem>
./src/components/transactions/transaction-table.tsx:              <SelectItem value="completed">Completed</SelectItem>
./src/components/transactions/transaction-table.tsx:              <SelectItem value="cancelled">Cancelled</SelectItem>
./src/components/ui/select.tsx:const SelectItem = React.forwardRef<
./src/components/ui/select.tsx:SelectItem.displayName = SelectPrimitive.Item.displayName;
./src/components/ui/select.tsx:  SelectItem,
./src/components/users/user-form.tsx:import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
./src/components/users/user-form.tsx:                        <SelectItem key={role} value={role}>
./src/components/users/user-form.tsx:                        </SelectItem>
